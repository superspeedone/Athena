<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd 
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

    <!-- DispatcherServlet上下文， 只管理@Controller类型的bean， 忽略其他型的bean, 如@Service（通过spring处理） -->
	<!-- 扫描web相关的Bean 使用Annotation自动注册Bean,只扫描@controller -->
	<context:component-scan base-package="com.superspeed"> <!-- base-package 如果多个，用“,”分隔  -->
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- REST中根据URL后缀自动判定Content-Type及相应的View -->
	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<property name="mediaTypes">
			<value>
				json=application/json
			</value>
		</property>
	</bean>
	
	<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
	<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager">
		<mvc:message-converters register-defaults="true">
			<bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter"/>  
			<!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<constructor-arg value="UTF-8" />
			</bean>
			<!-- JSON转换器 -->
			<bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
				<property name="supportedMediaTypes" value="application/json" /> 
			</bean>
			<bean class="org.springframework.http.converter.FormHttpMessageConverter">
				<property name="supportedMediaTypes" value="application/x-www-form-urlencoded" />
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
	
	<!-- 视图名称解析器：配置ViewResolver，定义跳转的文件的前后缀 。 可以用多个ViewResolver。 使用order属性排序。 InternalResourceViewResolver放在最后。 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	    <!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>

    <!-- 静态资源配置 -->
    <mvc:resources location="/resources/" mapping="/resources/**"/>

	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/demo/**"/>
			<bean class="com.superspeed.interceptor.SecurityInterceptor"/>
		</mvc:interceptor>
	</mvc:interceptors>


	<!-- 错误拦截器，统一处理 -->
	<bean id="exceptionResolver" class="com.superspeed.interceptor.CustomExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="java.lang.Exception">errors/500</prop>
			</props>
		</property>
	</bean>
	
</beans>