package com.superspeed.wx.controller.weixin;

import com.superspeed.wx.util.ServletUtils;
import com.superspeed.controller.base.BaseController;
import com.superspeed.kit.HttpKit;
import com.superspeed.kit.JsonKit;
import com.superspeed.kit.PropKit;
import com.superspeed.kit.StrKit;
import com.superspeed.model.AjaxResult;
import com.superspeed.sdk.weixin.api.ApiConfig;
import com.superspeed.sdk.weixin.api.PaymentApi;
import com.superspeed.sdk.weixin.api.entity.PayAttach;
import com.superspeed.sdk.weixin.api.kit.PaymentKit;
import com.superspeed.sdk.weixin.api.util.JsonUtils;
import com.superspeed.weixin.pojo.Authorization;
import com.superspeed.weixin.pojo.Userinfo;
import com.superspeed.weixin.utils.WeixinUtil;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by yanweiwen on 2017/12/6.
 */
@Controller("WxPayController2")
@RequestMapping(value = "weixin2/payment")
public class WxPayController extends BaseController {

    private AjaxResult ajax = new AjaxResult();
    //商户相关资料
    String appid = PropKit.get("appId");
    String partner = PropKit.get("mchId");
    String paternerKey = PropKit.get("paternerKey");
    String notify_url = PropKit.get("domain")+"/pay/pay_notify";

    /**
     * 如果要支持多公众账号，只需要在此返回各个公众号对应的  ApiConfig 对象即可
     * 可以通过在请求 url 中挂参数来动态从数据库中获取 ApiConfig 属性值
     */
    public ApiConfig getApiConfig() {
        ApiConfig ac = new ApiConfig();

        // 配置微信 API 相关常量
        ac.setToken(PropKit.get("token"));
        ac.setAppId(PropKit.get("appId"));
        ac.setAppSecret(PropKit.get("appSecret"));

        /**
         *  是否对消息进行加密，对应于微信平台的消息加解密方式：
         *  1：true进行加密且必须配置 encodingAesKey
         *  2：false采用明文模式，同时也支持混合模式
         */
        ac.setEncryptMessage(PropKit.getBoolean("encryptMessage", false));
        ac.setEncodingAesKey(PropKit.get("encodingAesKey", "setting it in config file"));
        return ac;
    }

    @RequestMapping(value = "login")
    public String login() throws Exception {
        try {
            Object openId = getSession().getAttribute("openId");
            if (null == openId || "".equals(openId.toString().trim())) {
                String code = getRequest().getParameter("code");
                String state = getRequest().getParameter("state");
                if (null == code || "".equals(code.toString().trim())) {
                    return "redirect:" + WeixinUtil.getOauth2AuthorUrl(getRequestUrl());
                } else {
                    Object oauth2State = getSession().getAttribute("OAUTH2_STATE");
                    if (null == oauth2State || null == state || !state.equals(oauth2State)) {
                        throw new IllegalStateException("授权失败");
                    }
                    //获取opendid
                    Authorization authorization = WeixinUtil.getOauth2AccessToken(code);
                    System.out.println("授权成功，openid -> " + authorization.getOpenid());
                    getSession().setAttribute("openId", authorization.getOpenid());
                    getSession().setAttribute("oauth2_authorization", authorization);
                }
            }
        } catch (Exception e) {
            log.error("获取oauth2授权地址失败", e);
            throw e;
        }
        return "redirect:/weixin/payment/index";
    }

    @RequestMapping(value = "index")
    public String index() throws Exception {
        Object openId = getSession().getAttribute("openId");
        if (null == openId || "".equals(openId.toString().trim())) {
            return "redirect:/weixin/payment/login";
        }
        //获取用户信息
        try {
            Userinfo userinfo = WeixinUtil.getUserinfo((String) openId);
        } catch (Exception e) {
            log.error("获取用户信息失败", e);
            throw e;
        }
        return "weixin/payment/index";
    }

    @ResponseBody
    @RequestMapping(value = "transorder")
    public AjaxResult transorder() {
        try {
            // openId，采用 网页授权获取 access_token API：SnsAccessTokenApi获取
            String openId = (String) getSession().getAttribute("openId");
            String total_fee = getParameter("total_fee");
            if (StrKit.isBlank(total_fee)) {
                ajax.addError("请输入数字金额");
                return ajax;
            }

            System.out.format("openId -> %s, amount -> %s \n", openId, total_fee);
            // 统一下单文档地址：https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=9_1

            Map<String, String> params = new HashMap<String, String>();
            params.put("appid", appid);
            params.put("mch_id", partner);
            params.put("body", "Javen微信公众号极速开发");
            String out_trade_no = System.currentTimeMillis() + "";
            params.put("out_trade_no", out_trade_no);
            int price = ((int) (Float.valueOf(total_fee) * 100));
            params.put("total_fee", price + "");
            params.put("attach", JsonKit.toJson(new PayAttach(out_trade_no, 2, 3)));

            //String ip = ServletUtils.getIpAddr(getRequest());
            String ip = null;
            if (StrKit.isBlank(ip)) {
                ip = "127.0.0.1";
            }

            params.put("spbill_create_ip", ip);
            params.put("trade_type", PaymentApi.TradeType.JSAPI.name());
            params.put("nonce_str", System.currentTimeMillis() / 1000 + "");
            params.put("notify_url", notify_url);
            params.put("openid", openId);

            String sign = PaymentKit.createSign(params, paternerKey);
            params.put("sign", sign);

            String xmlResult = PaymentApi.pushOrder(params);

            System.out.println(xmlResult);
            Map<String, String> result = PaymentKit.xmlToMap(xmlResult);

            String return_code = result.get("return_code");
            String return_msg = result.get("return_msg");
            if (StrKit.isBlank(return_code) || !"SUCCESS".equals(return_code)) {
                ajax.addError(return_msg);
                return ajax;
            }
            String result_code = result.get("result_code");
            if (StrKit.isBlank(result_code) || !"SUCCESS".equals(result_code)) {
                ajax.addError(return_msg);
                return ajax;
            }
            // 以下字段在return_code 和result_code都为SUCCESS的时候有返回
            String prepay_id = result.get("prepay_id");

            Map<String, String> packageParams = new HashMap<String, String>();
            packageParams.put("appId", appid);
            packageParams.put("timeStamp", System.currentTimeMillis() / 1000 + "");
            packageParams.put("nonceStr", System.currentTimeMillis() + "");
            packageParams.put("package", "prepay_id=" + prepay_id);
            packageParams.put("signType", "MD5");
            String packageSign = PaymentKit.createSign(packageParams, paternerKey);
            packageParams.put("paySign", packageSign);

            String jsonStr = JsonUtils.toJson(packageParams);
            ajax.success(jsonStr);
        } catch (Exception e) {
            log.error("Payment exception:", e);
            ajax.addError(e.getMessage());
        }
        return ajax;
    }

    @RequestMapping(value = "notify")
    @ResponseBody
    public String pay_notify() {
        //获取所有的参数
        StringBuffer sbf=new StringBuffer();

        Enumeration<String> en= getParameterNames();
        while (en.hasMoreElements()) {
            Object o= en.nextElement();
            sbf.append(o.toString()+"="+ getParameter(o.toString()));
        }

        log.error("支付通知参数："+sbf.toString());

        // 支付结果通用通知文档: https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=9_7
        String xmlMsg = HttpKit.readData(getRequest());
        System.out.println("支付通知="+xmlMsg);
        Map<String, String> params = PaymentKit.xmlToMap(xmlMsg);

        String appid  = params.get("appid");
        //商户号
        String mch_id  = params.get("mch_id");
        String result_code  = params.get("result_code");
        String openId      = params.get("openid");
        //交易类型
        String trade_type      = params.get("trade_type");
        //付款银行
        String bank_type      = params.get("bank_type");
        // 总金额
        String total_fee     = params.get("total_fee");
        //现金支付金额
        String cash_fee     = params.get("cash_fee");
        // 微信支付订单号
        String transaction_id      = params.get("transaction_id");
        // 商户订单号
        String out_trade_no      = params.get("out_trade_no");
        // 支付完成时间，格式为yyyyMMddHHmmss
        String time_end      = params.get("time_end");

        /////////////////////////////以下是附加参数///////////////////////////////////

        String attach      = params.get("attach");
        String fee_type      = params.get("fee_type");
        String is_subscribe      = params.get("is_subscribe");
        String err_code      = params.get("err_code");
        String err_code_des      = params.get("err_code_des");


        // 注意重复通知的情况，同一订单号可能收到多次通知，请注意一定先判断订单状态
        // 避免已经成功、关闭、退款的订单被再次更新
        //Order order = Order.dao.getOrderByTransactionId(transaction_id);
        Order order = null;
        if (order==null) {
            if(PaymentKit.verifyNotify(params, paternerKey)){
                if (("SUCCESS").equals(result_code)) {
                    //更新订单信息
                    log.warn("更新订单信息:"+attach);

                    //发送通知等

                    Map<String, String> xml = new HashMap<String, String>();
                    xml.put("return_code", "SUCCESS");
                    xml.put("return_msg", "OK");
                    return PaymentKit.toXml(xml);
                }
            }
        }
        return ("");
    }

    /**
     * 微信APP支付
     */
    public String appPay(){
        //不用设置授权目录域名
        //统一下单地址 https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=9_1#
        Map<String, String> params = new HashMap<String, String>();
        params.put("appid", appid);
        params.put("mch_id", partner);
        params.put("nonce_str", System.currentTimeMillis() / 1000 + "");
        params.put("body", "Javen微信支付测试");
        String out_trade_no=System.currentTimeMillis()+"";
        params.put("attach", "custom json");
        params.put("out_trade_no", out_trade_no);
        int price=10000;
        params.put("total_fee", price+"");

        String ip = ServletUtils.getIpAddr(getRequest());
        if (StrKit.isBlank(ip)) {
            ip = "127.0.0.1";
        }

        params.put("spbill_create_ip", ip);
        params.put("notify_url", notify_url);
        params.put("trade_type", "APP");

        String sign = PaymentKit.createSign(params, paternerKey);
        params.put("sign", sign);

        String xmlResult = PaymentApi.pushOrder(params);

        System.out.println(xmlResult);
        Map<String, String> result = PaymentKit.xmlToMap(xmlResult);

        String return_code = result.get("return_code");
        String return_msg = result.get("return_msg");
        if (StrKit.isBlank(return_code) || !"SUCCESS".equals(return_code)) {
            ajax.addError(return_msg);
            return toJson(ajax);
        }
        String result_code = result.get("result_code");
        if (StrKit.isBlank(result_code) || !"SUCCESS".equals(result_code)) {
            ajax.addError(return_msg);
            return toJson(ajax);
        }
        // 以下字段在return_code 和result_code都为SUCCESS的时候有返回
        String prepay_id = result.get("prepay_id");
        //封装调起微信支付的参数 https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=9_12
        Map<String, String> packageParams = new HashMap<String, String>();
        packageParams.put("appid", appid);
        packageParams.put("partnerid", partner);
        packageParams.put("prepayid", prepay_id);
        packageParams.put("package", "Sign=WXPay");
        packageParams.put("noncestr", System.currentTimeMillis() + "");
        packageParams.put("timestamp", System.currentTimeMillis() / 1000 + "");
        String packageSign = PaymentKit.createSign(packageParams, paternerKey);
        packageParams.put("sign", packageSign);

        String jsonStr = JsonUtils.toJson(packageParams);
        System.out.println("最新返回apk的参数:"+jsonStr);
        return toJson(ajax);
    }

}
